# -*- coding: utf-8 -*-
"""Citation extraction model final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L4qAQ6EoprO9EQJb8hRbIBNH29yQeyow
"""

!pip install pdfplumber spacy pandas



import os
import pdfplumber
import json
import spacy
import pandas as pd
from difflib import SequenceMatcher
from pathlib import Path
import re
import pprint

# === CONFIG ===
MODEL_PATH = "/content/drive/MyDrive/citation_ner_model_v6"
CITATION_CSV = "/content/drive/MyDrive/Citation Data For Fine-Tuning - Sheet1 up.csv"
OUTPUT_DIR = "/content/drive/MyDrive/Extracted citations_v6"

Path(OUTPUT_DIR).mkdir(exist_ok=True)

# === REGEX PATTERNS ===
regex_patterns = [
    r"(Ex\.?\s*\d+[a-zA-Z]?(,?\s*[\‚Äú\"][^\"‚Äù]+[\‚Äù\"])*\.?)",
    r"(Exhibit\s+[A-Z0-9]+(?: at \d+)?\.?)",
    r"(Dkt\. No\. \d+(?:; [A-Za-z]{3}\. \d{1,2}, \d{4})?)",
    r"Group Ex\. [A-Z0-9]+,? \d+(-\d+)?",
    r"\bExhibit\s+[A-Z0-9]+\b",
    r"\bSchedule\s+[A-Z0-9]+\b",
    r"(Ex\.?\s+[A-Z])",
    r"(Ex\.?\s+[A-Z] at \d+)",
    r"(see also [A-Z][^\n;,]+(?:v\.|,))",
]

# === HELPER FUNCTIONS ===

def load_citation_phrases(csv_path):
    df = pd.read_csv(csv_path, encoding='ISO-8859-1')
    df.columns = df.columns.str.strip()
    df = df.rename(columns={"Citation Language": "citation"})
    return df['citation'].dropna().unique().tolist()

def convert_pdf_to_json(pdf_path):
    text_by_page = {}
    with pdfplumber.open(pdf_path) as pdf:
        for i, page in enumerate(pdf.pages):
            text_by_page[f"page_{i+1}"] = page.extract_text() or ""
    return text_by_page

def load_ner_model(model_path):
    return spacy.load(model_path)

def is_close_match(text, phrases, threshold=0.85):
    return any(SequenceMatcher(None, text.lower(), phrase.lower()).ratio() >= threshold for phrase in phrases)

def extract_regex_citations(text, page_key):
    matches = []
    for pattern in regex_patterns:
        found = re.findall(pattern, text, flags=re.IGNORECASE)
        for citation in found:
            if isinstance(citation, tuple):
                citation = citation[0]
            matches.append({
                "page": page_key,
                "citation": citation.strip(),
                "source": "regex"
            })
    return matches

def extract_citations(text_by_page, nlp, known_phrases):
    matched = []
    for page, text in text_by_page.items():
        doc = nlp(text)
        for ent in doc.ents:
            if ent.label_ == "CITATION":
                citation = ent.text.strip()
                if is_close_match(citation, known_phrases):
                    matched.append({
                        "page": page,
                        "citation": citation,
                        "source": "model"
                    })
        # Also add regex citations from same page
        matched.extend(extract_regex_citations(text, page))
    return matched

def save_output(data, pdf_path):
    pdf_name = Path(pdf_path).stem
    output_json = os.path.join(OUTPUT_DIR, f"{pdf_name}_matched_citations.json")
    with open(output_json, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    return output_json

# === MAIN FUNCTION FOR SINGLE PDF ===
def process_pdf(pdf_path):
    phrases = load_citation_phrases(CITATION_CSV)
    nlp = load_ner_model(MODEL_PATH)
    print(f"\nüìÑ Processing PDF: {pdf_path}")
    try:
        text_by_page = convert_pdf_to_json(pdf_path)
        matched = extract_citations(text_by_page, nlp, phrases)
        save_path = save_output(matched, pdf_path)
        print(f"\n‚úÖ Total citations found: {len(matched)}")
        print(f"üìÑ Saved to: {save_path}")
        print("\nüìå Sample citations:")
        pprint.pprint(matched[:5])
        return matched
    except Exception as e:
        print(f"‚ùå Error processing {pdf_path}: {e}")
        return []

# === EXAMPLE USAGE ===
# Uncomment and update this with your actual PDF path:
pdf_path = "/content/drive/MyDrive/Narayani/MSJ.pdf"
results = process_pdf(pdf_path)

import json

# Replace this with the path to your JSON file
json_file_path = "/content/citation_outputs/1_23-cv-13207_22_PRIMARY DOCUMENT_matched_citations.json"  # or ..._matched_citations.json

# Load and pretty-print the content
with open(json_file_path, "r", encoding="utf-8") as f:
    data = json.load(f)

# Print the entire JSON (can be large)
import pprint
pprint.pprint(data)

import json

# Replace this with the path to your JSON file
json_file_path = "/content/citation_outputs/Affidavit_matched_citations.json"  # or ..._matched_citations.json

# Load and pretty-print the content
with open(json_file_path, "r", encoding="utf-8") as f:
    data = json.load(f)

# Print the entire JSON (can be large)
import pprint
pprint.pprint(data)

import json

# Replace this with the path to your JSON file
json_file_path = "/content/citation_outputs/Dkt. No. 30_matched_citations.json"  # or ..._matched_citations.json

# Load and pretty-print the content
with open(json_file_path, "r", encoding="utf-8") as f:
    data = json.load(f)

# Print the entire JSON (can be large)
import pprint
pprint.pprint(data)

import json

# Replace this with the path to your JSON file
json_file_path = "/content/citation_outputs/Primary Doc_matched_citations.json"  # or ..._matched_citations.json

# Load and pretty-print the content
with open(json_file_path, "r", encoding="utf-8") as f:
    data = json.load(f)

# Print the entire JSON (can be large)
import pprint
pprint.pprint(data)

